buildscript {
    ext {
        springBootVersion = '1.4.5.RELEASE'
        springCloudVersion = '1.2.3.RELEASE'
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'maven-publish'
apply from: 'gradle/pipeline.gradle'

group = 'io.pivotal'
version = getProp('newVersion') ?: "${buildVersion}"

ext {
	projectGroupId = project.group
	projectArtifactId = project.name
	projectVersion = project.version
}

repositories {
	mavenCentral()
	mavenLocal()
	if (getProp("M2_LOCAL")) {
		maven {
			url getProp("M2_LOCAL")
		}
	}
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

ext {
    systemPropsFromGradle = {
        project.gradle.startParameter.systemPropertiesArgs.entrySet().collect{"-D${it.key}=${it.value}"}
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
    maven { url "https://repo.spring.io/milestone" }
}

publishing {
	repositories {
		maven {
			url getProp('REPO_WITH_JARS') ?: 'http://localhost:8081/artifactory/libs-release-local'
			credentials {
				username getProp('M2_SETTINGS_REPO_USERNAME') ?: 'admin'
				password getProp('M2_SETTINGS_REPO_PASSWORD') ?: 'password'
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.name
			from components.java
		}
	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/it/java')
        }
        resources.srcDir file('src/it/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile("org.springframework.retry:spring-retry:1.2.0.RELEASE")
    compile("org.springframework.cloud:spring-cloud-config-client:${springCloudVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("org.springframework.cloud:spring-cloud-config-server:${springCloudVersion}")

    testCompile("com.github.stefanbirkner:system-rules:1.16.1")
    testCompile("org.hamcrest:hamcrest-library:1.3")
    testCompile "org.mockito:mockito-core:1.10.19"

    optional("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")
}

compileJava.dependsOn(processResources)

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task integrationTest(type: Test) {
    jvmArgs systemPropsFromGradle()
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    group 'verification'
    description = "Runs the integration tests"
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

String getProp(String propName) {
	return hasProperty(propName) ?
			(getProperty(propName) ?: System.properties[propName]) : System.properties[propName] ?:
			System.getenv(propName)
}
